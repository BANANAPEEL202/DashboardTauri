{"version":3,"file":"generatorWorker.js","mappings":"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","sources":["webpack://openmct/webpack/universalModuleDefinition","webpack://openmct/./example/generator/generatorWorker.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"openmct\"] = factory();\n\telse\n\t\troot[\"openmct\"] = factory();\n})(this, () => {\nreturn ","/*****************************************************************************\n * Open MCT, Copyright (c) 2014-2023, United States Government\n * as represented by the Administrator of the National Aeronautics and Space\n * Administration. All rights reserved.\n *\n * Open MCT is licensed under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n *\n * Open MCT includes source code licensed under additional open source\n * licenses. See the Open Source Licenses file (LICENSES.md) included with\n * this source code distribution or the Licensing information page available\n * at runtime from the About dialog for additional information.\n *****************************************************************************/\n\n(function () {\n  var FIFTEEN_MINUTES = 15 * 60 * 1000;\n\n  var handlers = {\n    subscribe: onSubscribe,\n    unsubscribe: onUnsubscribe,\n    request: onRequest\n  };\n\n  var subscriptions = {};\n\n  function workSubscriptions(timestamp) {\n    var now = Date.now();\n    var nextWork = Math.min.apply(\n      Math,\n      Object.values(subscriptions).map(function (subscription) {\n        return subscription(now);\n      })\n    );\n    var wait = nextWork - now;\n    if (wait < 0) {\n      wait = 0;\n    }\n\n    if (Number.isFinite(wait)) {\n      setTimeout(workSubscriptions, wait);\n    }\n  }\n\n  function onSubscribe(message) {\n    var data = message.data;\n\n    // Keep\n    var start = Date.now();\n    var step = 1000 / data.dataRateInHz;\n    var nextStep = start - (start % step) + step;\n    let work;\n    if (data.spectra) {\n      work = function (now) {\n        while (nextStep < now) {\n          const messageCopy = Object.create(message);\n          message.data.start = nextStep - 60 * 1000;\n          message.data.end = nextStep;\n          onRequest(messageCopy);\n          nextStep += step;\n        }\n\n        return nextStep;\n      };\n    } else {\n      work = function (now) {\n        while (nextStep < now) {\n          self.postMessage({\n            id: message.id,\n            data: {\n              name: data.name,\n              utc: nextStep,\n              yesterday: nextStep - 60 * 60 * 24 * 1000,\n              sin: sin(\n                nextStep,\n                data.period,\n                data.amplitude,\n                data.offset,\n                data.phase,\n                data.randomness,\n                data.infinityValues,\n                data.exceedFloat32\n              ),\n              wavelengths: wavelengths(),\n              intensities: intensities(),\n              cos: cos(\n                nextStep,\n                data.period,\n                data.amplitude,\n                data.offset,\n                data.phase,\n                data.randomness,\n                data.infinityValues,\n                data.exceedFloat32\n              )\n            }\n          });\n          nextStep += step;\n        }\n\n        return nextStep;\n      };\n    }\n\n    subscriptions[message.id] = work;\n    workSubscriptions();\n  }\n\n  function onUnsubscribe(message) {\n    delete subscriptions[message.data.id];\n  }\n\n  function onRequest(message) {\n    var request = message.data;\n    if (request.end === undefined) {\n      request.end = Date.now();\n    }\n\n    if (request.start === undefined) {\n      request.start = request.end - FIFTEEN_MINUTES;\n    }\n\n    var now = Date.now();\n    var start = request.start;\n    var end = request.end > now ? now : request.end;\n    var amplitude = request.amplitude;\n    var period = request.period;\n    var offset = request.offset;\n    var dataRateInHz = request.dataRateInHz;\n    var phase = request.phase;\n    var randomness = request.randomness;\n    var loadDelay = Math.max(request.loadDelay, 0);\n    var infinityValues = request.infinityValues;\n    var exceedFloat32 = request.exceedFloat32;\n\n    var step = 1000 / dataRateInHz;\n    var nextStep = start - (start % step) + step;\n\n    var data = [];\n\n    for (; nextStep < end && data.length < 5000; nextStep += step) {\n      data.push({\n        utc: nextStep,\n        yesterday: nextStep - 60 * 60 * 24 * 1000,\n        sin: sin(\n          nextStep,\n          period,\n          amplitude,\n          offset,\n          phase,\n          randomness,\n          infinityValues,\n          exceedFloat32\n        ),\n        wavelengths: wavelengths(),\n        intensities: intensities(),\n        cos: cos(\n          nextStep,\n          period,\n          amplitude,\n          offset,\n          phase,\n          randomness,\n          infinityValues,\n          exceedFloat32\n        )\n      });\n    }\n\n    if (loadDelay === 0) {\n      postOnRequest(message, request, data);\n    } else {\n      setTimeout(() => postOnRequest(message, request, data), loadDelay);\n    }\n  }\n\n  function postOnRequest(message, request, data) {\n    self.postMessage({\n      id: message.id,\n      data: request.spectra\n        ? {\n            wavelength: data.map((item) => {\n              return item.wavelength;\n            }),\n            cos: data.map((item) => {\n              return item.cos;\n            })\n          }\n        : data\n    });\n  }\n\n  function cos(\n    timestamp,\n    period,\n    amplitude,\n    offset,\n    phase,\n    randomness,\n    infinityValues,\n    exceedFloat32\n  ) {\n    if (infinityValues && exceedFloat32) {\n      if (Math.random() > 0.5) {\n        return Number.POSITIVE_INFINITY;\n      } else if (Math.random() < 0.01) {\n        return getRandomFloat32OverflowValue();\n      }\n    } else if (infinityValues && Math.random() > 0.5) {\n      return Number.POSITIVE_INFINITY;\n    } else if (exceedFloat32 && Math.random() < 0.01) {\n      return getRandomFloat32OverflowValue();\n    }\n\n    return (\n      amplitude * Math.cos(phase + (timestamp / period / 1000) * Math.PI * 2) +\n      amplitude * Math.random() * randomness +\n      offset\n    );\n  }\n\n  function sin(\n    timestamp,\n    period,\n    amplitude,\n    offset,\n    phase,\n    randomness,\n    infinityValues,\n    exceedFloat32\n  ) {\n    if (infinityValues && exceedFloat32) {\n      if (Math.random() > 0.5) {\n        return Number.POSITIVE_INFINITY;\n      } else if (Math.random() < 0.01) {\n        return getRandomFloat32OverflowValue();\n      }\n    } else if (infinityValues && Math.random() > 0.5) {\n      return Number.POSITIVE_INFINITY;\n    } else if (exceedFloat32 && Math.random() < 0.01) {\n      return getRandomFloat32OverflowValue();\n    }\n\n    return (\n      amplitude * Math.sin(phase + (timestamp / period / 1000) * Math.PI * 2) +\n      amplitude * Math.random() * randomness +\n      offset\n    );\n  }\n\n  // Values exceeding float32 range (Positive: 3.4+38, Negative: -3.4+38)\n  function getRandomFloat32OverflowValue() {\n    const sign = Math.random() > 0.5 ? 1 : -1;\n\n    return sign * 3.4e39;\n  }\n\n  function wavelengths() {\n    let values = [];\n    while (values.length < 5) {\n      const randomValue = Math.random() * 100;\n      if (!values.includes(randomValue)) {\n        values.push(String(randomValue));\n      }\n    }\n\n    return values;\n  }\n\n  function intensities() {\n    let values = [];\n    while (values.length < 5) {\n      const randomValue = Math.random() * 10;\n      if (!values.includes(randomValue)) {\n        values.push(String(randomValue));\n      }\n    }\n\n    return values;\n  }\n\n  function sendError(error, message) {\n    self.postMessage({\n      error: error.name + ': ' + error.message,\n      message: message,\n      id: message.id\n    });\n  }\n\n  self.onmessage = function handleMessage(event) {\n    var message = event.data;\n    var handler = handlers[message.request];\n\n    if (!handler) {\n      sendError(new Error('unknown message type'), message);\n    } else {\n      try {\n        handler(message);\n      } catch (e) {\n        sendError(e, message);\n      }\n    }\n  };\n})();\n"],"names":["root","factory","exports","module","define","amd","this","handlers","subscribe","message","data","start","Date","now","step","dataRateInHz","nextStep","work","spectra","messageCopy","Object","create","end","onRequest","self","postMessage","id","name","utc","yesterday","sin","period","amplitude","offset","phase","randomness","infinityValues","exceedFloat32","wavelengths","intensities","cos","subscriptions","workSubscriptions","unsubscribe","request","timestamp","wait","Math","min","apply","values","map","subscription","Number","isFinite","setTimeout","undefined","loadDelay","max","length","push","postOnRequest","wavelength","item","random","POSITIVE_INFINITY","getRandomFloat32OverflowValue","PI","randomValue","includes","String","sendError","error","onmessage","event","handler","e","Error"],"sourceRoot":""}